// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VivaClient is the client API for Viva service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VivaClient interface {
	// ClientStream is a singular method to establish server->mobile app connection, and all messages and data from camunda transfers using this endpoint
	// ClientStream endpoint is a stream-type connection. All request and responses transfers using one connection
	ClientStream(ctx context.Context, in *ClientVivaMessage, opts ...grpc.CallOption) (Viva_ClientStreamClient, error)
}

type vivaClient struct {
	cc grpc.ClientConnInterface
}

func NewVivaClient(cc grpc.ClientConnInterface) VivaClient {
	return &vivaClient{cc}
}

func (c *vivaClient) ClientStream(ctx context.Context, in *ClientVivaMessage, opts ...grpc.CallOption) (Viva_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Viva_ServiceDesc.Streams[0], "/pb.Viva/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &vivaClientStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Viva_ClientStreamClient interface {
	Recv() (*ClientVivaMessage, error)
	grpc.ClientStream
}

type vivaClientStreamClient struct {
	grpc.ClientStream
}

func (x *vivaClientStreamClient) Recv() (*ClientVivaMessage, error) {
	m := new(ClientVivaMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VivaServer is the server API for Viva service.
// All implementations must embed UnimplementedVivaServer
// for forward compatibility
type VivaServer interface {
	// ClientStream is a singular method to establish server->mobile app connection, and all messages and data from camunda transfers using this endpoint
	// ClientStream endpoint is a stream-type connection. All request and responses transfers using one connection
	ClientStream(*ClientVivaMessage, Viva_ClientStreamServer) error
	mustEmbedUnimplementedVivaServer()
}

// UnimplementedVivaServer must be embedded to have forward compatible implementations.
type UnimplementedVivaServer struct {
}

func (UnimplementedVivaServer) ClientStream(*ClientVivaMessage, Viva_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedVivaServer) mustEmbedUnimplementedVivaServer() {}

// UnsafeVivaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VivaServer will
// result in compilation errors.
type UnsafeVivaServer interface {
	mustEmbedUnimplementedVivaServer()
}

func RegisterVivaServer(s grpc.ServiceRegistrar, srv VivaServer) {
	s.RegisterService(&Viva_ServiceDesc, srv)
}

func _Viva_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientVivaMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VivaServer).ClientStream(m, &vivaClientStreamServer{stream})
}

type Viva_ClientStreamServer interface {
	Send(*ClientVivaMessage) error
	grpc.ServerStream
}

type vivaClientStreamServer struct {
	grpc.ServerStream
}

func (x *vivaClientStreamServer) Send(m *ClientVivaMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Viva_ServiceDesc is the grpc.ServiceDesc for Viva service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Viva_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Viva",
	HandlerType: (*VivaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Viva_ClientStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "viva.proto",
}
